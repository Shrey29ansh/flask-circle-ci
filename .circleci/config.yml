version: 2.1
parameters:
  environment:
    type: string
    default: "dev"
  release_tag:
    type: string
    default: "latest"
  image_tag:
    type: string
    default: "current"
  slack-messages:
    type: string
    default: "Circle CI Job started for project ${CIRCLE_PROJECT_REPONAME} on ${CIRCLE_BRANCH} branch"

commands:
  slack-notification-customized:
    description: "This is dynamic slack notification to use."
    parameters:
      message:
        type: string
        default: "Circle CI Job started for project ${CIRCLE_PROJECT_REPONAME} on ${CIRCLE_BRANCH} branch"
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "<<parameters.message>>",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
orbs:
  python: circleci/python@2.1.1
  slack: circleci/slack@4.9.3

jobs:
  pre-build:
    docker:
      - image: cimg/python:3.12
    steps:
      - run:
          name: Printenvs
          command: |
            printenv
            python3 --version
  build:
    docker:
      - image: cimg/python:3.12
    steps:
      - run:
          name: Printenvs
          command: |
            echo "BUILD Docker"
  push:
    docker:
      - image: cimg/python:3.12
    steps:
      - run:
          name: Printenvs
          command: |
            echo "ECR Push to dev environment with dev-some random"
  deploy-to-dev:
    docker:
      - image: cimg/python:3.12
    steps:
      - run:
          name: Printenvs
          command: |
            echo "ECS Deployment to dev environment for developer testing"
            
  deploy-to-staging:
    docker:
      - image: cimg/python:3.12
    steps:
      - run:
          name: Printenvs
          command: |
            echo "ECS Deployment to staging environment for QA testing"
  
  deploy-to-production:
    docker:
      - image: cimg/python:3.12
    steps:
      - run:
          name: Printenvs
          command: |
            echo "ECS Deployment to production environment."

  post-production:
    docker:
      - image: cimg/python:3.12
    steps:
      - slack-notification-customized:
          message: "Hurrahhh!! A production deployment\nIsn't this Awesome.Circle CI deployed a new Version on to production environment."

  notify: 
    parameters:
      message:
        type: string
        default: "Circle CI Job started for project ${CIRCLE_PROJECT_REPONAME} on ${CIRCLE_BRANCH} branch "
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack-notification-customized:
          message: "<<parameters.message>>"
  lint-test:
    docker:
      - image: cimg/python:3.12
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Run tests
          command: |
            flake8 --ignore=F821,E741,F821,E501,E501,F821,E501,E501,W292,F401 --verbose app.py
      - run:
          when: on_fail
          name: Add Comment to PR
          command: |
            export PULL_REQUEST_NUMBER=$(echo "${CI_PULL_REQUEST}" | awk -F"/" '{print $7}')
            printenv
            curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${GITHUB_COMMENT_PERSONAL_TOKEN}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/issues/${PULL_REQUEST_NUMBER}/comments \
            -d '{"body":"Oops! This Pull Request is failed."}'
      - run:
          name: Linting done
          command: echo "Linting done"
  test:
    docker:
      - image: cimg/python:3.12
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            pip install -r requirements.txt
      - run:
          name: Run Tests
          command: |
            pytest || echo "No tests found."
      - run:
          name: Test Done
          command: echo "Test done."

  slack-notification:
    docker:
      - image: cimg/python:3.12
    steps:
      - run:
          name: slack-notification
          command: echo "Sending to slack"
      - run:
          name: slack-notification done
          command: echo "Notification done"

  waiter:
    docker:
      - image: cimg/python:3.12
    steps:
      - run: |
          while [[ $(curl --location --request GET "https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/job" --header "Circle-Token: $CCI_Token"| jq -r '.items[]|select(.name != "waiter")|.status' | grep -c "running") -gt 0 ]]
            do
              sleep 1
            done
      - run: echo "All required jobs have now completed"

workflows:
  version: 2
  pr-workflow:
    jobs:
      - notify:
          context: slack-secrets
      - pre-build:
          context: AWS
          requires: 
            - notify
      - test
      - build:
          requires:
            - pre-build
      - push:
          required:
            - build
      - deploy-to-dev
          requires:
            - push
      - staging-approval:
          type: approval
          requires:
            - deploy-to-dev
      - deploy-to-staging:
          requires:
            - staging-approval
      - production-approval:
          type: approval
          requires:
            - deploy-to-staging
      - deploy-to-production
          requires:
            - production-approval
      - post-production:
          context: slack-secrets
          requires:
            - deploy-to-production
