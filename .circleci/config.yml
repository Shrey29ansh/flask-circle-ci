version: 2.1

orbs:
  python: circleci/python@2.1.1
  slack: circleci/slack@4.9.3
  aws-cli: circleci/aws-cli@2.0.3
  aws-ecr: circleci/aws-ecr@9.3.4

parameters:
  app_name:
    type: string
    default: "core-platform"
  build_path:
    type: string
    default: "."
  dockerfile_name:
    type: string
    default: "Dockerfile"
  extra_build_args:
    type: string
    default: ""
  dockerfile_path:
    type: string
    default: "docker"
  aws_profile:
    type: string
    default: "default"
  kms_key_id:
    type: string
    default: ""

commands:
  success-slack:
    description: "This is dynamic slack notification to use when an event is success only."
    steps:
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
  failure-slack:
    description: "This is dynamic slack notification to use when an event is success only."
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1
  slack-notification-customized:
    description: "This is dynamic slack notification to use."
    parameters:
      message:
        type: string
        default: "Circle CI Job started for project ${CIRCLE_PROJECT_REPONAME} on ${CIRCLE_BRANCH} branch"
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "<<parameters.message>>",
                      "emoji": true
                    }
                  ]
                }
              ]
            }

jobs:
  aws-setup:
    executor: aws-cli/default
    working_directory: ~/application
    steps:
      - aws-cli/setup:
          profile-name: default
      - persist_to_workspace:
          root: ~/application
          paths:
            - .
      - run: 
          # Running this sample commmand to  Check if everything is working fine.
          command: | 
            aws sts get-caller-identity
  build-and-push:
    executor:
      name: aws-ecr/default
    working_directory: ~/application
    steps:
      - checkout
      - aws-ecr/build_and_push_image:
          attach_workspace: true 
          account_id: ${AWS_ACCOUNT_ID} 
          build_path: <<pipeline.parameters.build_path>> 
          checkout: false 
          container_registry_login: false 
          create_repo: false 
          dockerfile: <<pipeline.parameters.dockerfile_name>> 
          extra_build_args: <<pipeline.parameters.extra_build_args>> 
          path: <<pipeline.parameters.dockerfile_path>> 
          profile_name: <<pipeline.parameters.aws_profile>> 
          public_registry: false 
          push_image: true 
          region: ${AWS_DEFAULT_REGION} 
          remote_docker_layer_caching: false 
          repo: <<pipeline.parameters.app_name>> 
          repo_encryption_kms_key: <<pipeline.parameters.kms_key_id>> 
          repo_encryption_type: AES256 
          repo_scan_on_push: true 
          set_repo_policy: false 
          setup_remote_docker: false 
          tag: "${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}"
          use_credentials_helper: true 
          auth:
            - aws-cli/setup
  test:
    docker:
      - image: cimg/python:3.12
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: poetry
          args: --no-root
      - run: 
          command: |
            poetry run pytest --version
            poetry run black src tests --check
            poetry run isort src tests --check
      - run:
          when: on_fail
          name: Add Comment to PR
          command: |
            export PULL_REQUEST_NUMBER=$(echo "${CI_PULL_REQUEST}" | awk -F"/" '{print $7}')
            printenv
            curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${GITHUB_COMMENT_PERSONAL_TOKEN}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/issues/${PULL_REQUEST_NUMBER}/comments \
            -d '{"body":"Oops! This Pull Request is failed while running test cases. Please check the details."}'
      - run:
          name: Testing done
          command: echo "Testing is complete....."

  deploy-to-dev:
    docker:
      - image: cimg/python:3.12
    steps:
      - run:
          name: Printenvs
          command: |
            echo "ECS Deployment to dev environment for developer testing"
            
  deploy-to-staging:
    docker:
      - image: cimg/python:3.12
    steps:
      - run:
          name: Printenvs
          command: |
            echo "ECS Deployment to staging environment for QA testing"
  deploy-to-production:
    docker:
      - image: cimg/python:3.12
    steps:
      - run:
          name: Printenvs
          command: |
            echo "ECS Deployment to production environment."

  post-production:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - success-slack
      - failure-slack

  notify: 
    parameters:
      message:
        type: string
        default: "Circle CI Job started for project ${CIRCLE_PROJECT_REPONAME} on ${CIRCLE_BRANCH} branch"
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack-notification-customized:
          message: "<<parameters.message>>"

  slack-notification:
    docker:
      - image: cimg/python:3.12
    steps:
      - run:
          name: slack-notification
          command: echo "Sending to slack"
      - run:
          name: slack-notification done
          command: echo "Notification done"

  waiter:
    docker:
      - image: cimg/python:3.12
    steps:
      - run: |
          while [[ $(curl --location --request GET "https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/job" --header "Circle-Token: $CCI_Token"| jq -r '.items[]|select(.name != "waiter")|.status' | grep -c "running") -gt 0 ]]
            do
              sleep 1
            done
      - run: echo "All required jobs have now completed"

workflows:
  version: 2
  pr-workflow:
    jobs:
      - notify:
          context: slack-secrets
      - aws-setup:
          context: AWS
      - test:
          requires:
            - notify
          filters:
            branches:
              only:
                - dev
                - staging
                - main 
      - build-and-push:
          context: AWS
      # - push:
      #     requires:
      #       - build
      # - deploy-to-dev:
      #     requires:
      #       - push
      # - slack/on-hold:
      #     name: send-staging-approval-slack-notification
      #     context: slack-secrets
      #     requires:
      #       - deploy-to-dev
      # - staging-approval:
      #     type: approval
      #     requires:
      #       - send-staging-approval-slack-notification
      # - deploy-to-staging:
      #     requires:
      #       - staging-approval
      # - slack/on-hold:
      #     name: send-production-approval-slack-notification
      #     context: slack-secrets
      #     requires:
      #       - deploy-to-dev
      # - production-approval:
      #     type: approval
      #     requires:
      #       - send-production-approval-slack-notification
      # - deploy-to-production:
      #     requires:
      #       - production-approval
      # - post-production:
      #     context: slack-secrets
      #     requires:
      #       - deploy-to-production